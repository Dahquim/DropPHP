<p>DropPHP provides a simple interface for Dropbox's REST API to list, download and upload files.
<!--more-->
For authentication it uses <a href="https://github.com/jrconlin/oauthsimple" target="_blank">OAuthSimple</a>, HTTPS requests are made with PHP's built in stream wrapper. It does not require any special PHP libarys like PECL, cURL or OAUTH.</p>
<p>[wpfilebase tag=attachments]</p>
<h2>Dropbox REST API Authentication</h2>
<p><a href="https://www.dropbox.com/developers/reference/api" target="_blank">Dropbox Rest API</a> uses <a href="http://en.wikipedia.org/wiki/OAuth" target="_blank">OAuth</a> for authentication. When the Dropbox is accessed for the first time, the PHP Client retrieves a request token from Dropbox webservice. This token needs to be authorized for a Dropbox user account, so the user is redirected to an authentication page where they allow the app access to their account. Afterwards the user is redirected back to the web application, where DropPHP uses the previously stored request token (and secret) to retrieve an access token. This access token is saved and will be used to authorize any further API requests.</p>
<h2>Functions</h2>
The class DropboxClient provides the following API functions.
On error a DropboxException is thrown, so make sure you call the functions in a try-catch block.
Functions having argument dropbox_file/dropbox_path accept this to be a string or file/folder metadata.

GetAccountInfo(): Retrieves information about the user's account. Returns an object with account data. https://www.dropbox.com/developers/reference/api#account-info. 

GetMetadata($dropbox_path): Retrieves file and folder metadata. https://www.dropbox.com/developers/reference/api#metadata

GetFiles($dropbox_path='', $recursive=false): Get file list of a folder. Returns an array where keys the file paths and values metadata https://www.dropbox.com/developers/reference/api#metadata.
If $recursive is true, all sub-folders are recursivly scanned. Note that this can take some time because each sub-folder causes a new API request.

DownloadFile($dropbox_file, $dest_path='', $revision=-1): Downloads a file to the specified location on the webserver. The destionation directory has to exist. $revision: The revision of the file to download. This defaults to the most recent revision. Returns metadata of the downloaded file.

UploadFile($src_file, $dropbox_path=''): Uploads a file from webserver to dropbox. Returns metadata of the uploaded file.

GetLink($dropbox_file, $preview=true): Returns a download link to a file. If $preview is true it creates a link users can use to view a preview of the file in a web browser.

<h2>Setup</h2>
<ol>
<li><a href="https://www.dropbox.com/developers/apps" target="_blank">Create a Dropbox App</a></li>
<li>Copy & Paste the App key and secret to the PHP code, that creates the DropboxClient object:<code>$dropbox = new DropboxClient(array(
'app_key' => "YOUR_APP_KEY",
'app_secret' => "YOUR_APP_SECRET",
'app_full_access' => false, // if the app has full or folder only access
),'en'); // language/country code
</code></li>
<li>See sample.php. Your web application should run like the following logic (pseudo code):
<code><span style="text-decoration: underline;">If &lt;Access Token exist&gt; Then</span>
Load Access Token
$dropbox->SetAccessToken
<span style="text-decoration: underline;">ElseIf  &lt;User comes from Dropbox Auth Page&gt; Then</span>
Load previously stored request token
$dropbox->GetAccessToken (using the request token)
Save Access Token
Delete request token
<span style="text-decoration: underline;">Else</span>
$dropbox->GetRequestToken
Save the request token secret
$dropbox->BuildAuthorizeUrl
Redirect to authorize url
Exit
<span style="text-decoration: underline;">EndIf</span>
Do Dropbox stuff
</code></li>
</ol>
<h2>Tokens</h2>
<p>A token is an alpha-numeric code used to authorize API requests. Each token has a secret key, which is like a password to use the token. DropPHP uses an array to store tokens:
<code>Array
(
[t] => 6lj3i20m4fsgi6y
[s] => 2pn7x2bjsm3xvq8
)</code>
At Index t is the actual token, s is the token secret. In sample.php, this array is just serialized and written to a file (function store_token) in the folder /tokens. You should use your own method to save and load tokens (i.e. MySQL). Of course you can put the tokens in PHP's $_SESSION array, then you have have to re-authenticate every new session.</p>
